{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","search","setSearch","input","setInput","address","setAddress","coordinates","setCoordinates","copied","setCopied","error","setError","myRef","React","createRef","useEffect","setTimeout","className","id","onSubmit","event","preventDefault","Geocode","setApiKey","process","fromAddress","then","response","console","log","results","geometry","location","lat","lng","formatted_address","value","onChange","target","handleInputChange","text","onCopy","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAqGeA,MAhGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACRC,EADQ,KACAC,EADA,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,OAGeJ,mBAAS,IAHxB,mBAGRK,EAHQ,KAGCC,EAHD,OAIuBN,mBAAS,IAJhC,mBAIRO,EAJQ,KAIKC,EAJL,OAKaR,oBAAS,GALtB,mBAKRS,EALQ,KAKAC,EALA,OAMWV,oBAAS,GANpB,mBAMRW,EANQ,KAMDC,EANC,KAOXC,EAAQC,IAAMC,YAsDhB,OAtBFC,qBAAU,WACWC,YAAW,WAC5BL,GAAS,KAER,OAEH,CAACD,IAEHK,qBAAU,WAIcC,YAAW,WAC/BP,GAAU,KAKT,OAEF,CAACD,IAGA,sBAAKS,UAAU,YAAf,UACE,oCACE,oBAAIC,GAAG,QAAP,6BACA,uBAAMC,SAAU,SAACC,GACfA,EAAMC,iBAhDhBC,IAAQC,UAAUC,2CAChBF,IAAQG,YAAYzB,GAAQ0B,MAC1B,SAACC,GACCC,QAAQC,IAAIF,GADA,MAESA,EAASG,QAAQ,GAAGC,SAASC,SAA1CC,EAFI,EAEJA,IAAKC,EAFD,EAECA,IACb3B,EAAe,CACb0B,MACAC,QAEF7B,EAAWsB,EAASG,QAAQ,GAAGK,sBAEjC,SAACzB,GACCkB,QAAQlB,MAAMA,GACdC,GAAS,MAGbiB,QAAQC,IAAI7B,GACZG,EAASH,GACTC,EAAU,KA6BJ,UAIE,uBAAOgB,UAAU,UAAUmB,MAAOpC,EAAQqC,SAAU,SAACjB,IA5DrC,SAAC,GAAgB,IACjCgB,EADgC,EAAbE,OACnBF,MACRnC,EAAUmC,GACV/B,EAAW,IACXE,EAAe,IACfJ,EAASiC,GAwDCG,CAAkBnB,MAChB,6BAIR,oCACDlB,EACC,oBAAGe,UAAU,SAAb,qBAA8B,sBAAMA,UAAU,cAAhB,SAA+Bf,OAC3D,KACHE,GAAWE,EACV,gCACE,oBAAGW,UAAU,SAAb,sBAA+B,sBAAMA,UAAU,cAAhB,SAA+Bb,OAC9D,cAAC,kBAAD,CAAiBoC,KAAI,UAAKlC,EAAY2B,IAAjB,aAAyB3B,EAAY4B,KAAOO,OAAQ,WAAOhC,GAAU,IAA1F,SACA,oBAAGQ,UAAU,SAAb,0BAAmC,sBAAMyB,IAAK9B,EAAOK,UAAU,qBAA5B,mBAAqDX,EAAY2B,IAAjE,aAAyE3B,EAAY4B,eAG1H,QAEA,oCACGxB,EAAQ,mBAAGO,UAAU,kBAAb,kCAA0D,KAClET,EAAS,mBAAGS,UAAU,mBAAb,kCAA2D,YCnF9D0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5893a92f.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, {useEffect, useState} from 'react';\nimport Geocode from 'react-geocode';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction App() {\nconst [search, setSearch] = useState(\"\");\nconst [input, setInput] = useState(\"\");\nconst [address, setAddress] = useState(\"\");\nconst [coordinates, setCoordinates] = useState({});\nconst [copied, setCopied] = useState(false);\nconst [error, setError] = useState(false);\nvar myRef = React.createRef();\n\nconst handleInputChange = ({ target }) => {\n  const { value } = target;\n  setSearch(value);\n  setAddress(\"\");\n  setCoordinates({});\n  setInput(value);\n};\n\nconst getLatAndLong = () => {\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\n  Geocode.fromAddress(search).then(\n    (response) => {\n      console.log(response)\n      const { lat, lng } = response.results[0].geometry.location;\n      setCoordinates({\n        lat,\n        lng,\n      });\n      setAddress(response.results[0].formatted_address);\n    },\n    (error) => {\n      console.error(error);\n      setError(true);\n    }\n  );\n  console.log(search)\n  setInput(search);\n  setSearch(\"\");\n};\n\nuseEffect(()=>{\n  const errorTimer = setTimeout(() => {\n    setError(false);\n\n  }, 1000);\n  // clearTimeout(errorTimer)\n},[error]);\n\nuseEffect(()=>{\n  // if (myRef.current) {\n  //   myRef.current.style.backgroundColor = \"yellow\";\n  // }\n  const feedbackTimer = setTimeout(() => {\n    setCopied(false);\n    // if (myRef.current) {\n    //   console.log(\"hi\")\n    //   myRef.current.style.backgroundColor = \"transparent\";\n    // }\n  }, 1000);\n  // clearInterval(feedbackTimer)\n}, [copied]);\n\n  return (\n    <div className=\"container\">\n      <section>\n        <h1 id=\"title\">Get Lat and Lng</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          getLatAndLong();\n        }}>\n          <input className=\"address\" value={search} onChange={(event)=>{\n            handleInputChange(event);\n          }}/><br/>\n          {/* <input type=\"submit\" className=\"submitBtn\" value=\"Submit\" /> */}\n        </form>\n      </section>\n      <section>\n    {input ? \n      <p className=\"header\">Search: <span className=\"description\">{input}</span></p>\n      : null }\n    {address && coordinates ? \n      <div>\n        <p className=\"header\">Address: <span className=\"description\">{address}</span></p>\n        <CopyToClipboard text={`${coordinates.lat}, ${coordinates.lng}`} onCopy={() => {setCopied(true)}}>\n        <p className=\"header\">Coordinates: <span ref={myRef} className=\"coords description\">{`${coordinates.lat}, ${coordinates.lng}`}</span></p>\n        </CopyToClipboard>\n      </div>\n    : null }\n    </section>\n      <section>\n        {error ? <p className=\"description red\">Put a valid address!</p> : null}\n        {copied ? <p className=\"description blue\">Copied to clipboard!</p> : null}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}