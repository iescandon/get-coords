{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","search","setSearch","input","setInput","address","setAddress","coordinates","setCoordinates","copied","setCopied","error","setError","useEffect","setTimeout","className","id","onSubmit","event","preventDefault","Geocode","setApiKey","process","fromAddress","then","response","results","geometry","location","lat","lng","formatted_address","value","onChange","target","handleInputChange","Fragment","text","onCopy","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA2FeA,MAtFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACRC,EADQ,KACAC,EADA,OAEWF,mBAAS,IAFpB,mBAERG,EAFQ,KAEDC,EAFC,OAGeJ,mBAAS,IAHxB,mBAGRK,EAHQ,KAGCC,EAHD,OAIuBN,mBAAS,IAJhC,mBAIRO,EAJQ,KAIKC,EAJL,OAKaR,oBAAS,GALtB,mBAKRS,EALQ,KAKAC,EALA,OAMWV,oBAAS,GANpB,mBAMRW,EANQ,KAMDC,EANC,KAgDb,OAZFC,qBAAU,WACRC,YAAW,WACTF,GAAS,KACR,OACH,CAACD,IAEHE,qBAAU,WACRC,YAAW,WACTJ,GAAU,KACT,OACF,CAACD,IAGA,sBAAKM,UAAU,sFAAf,UACE,0BAASA,UAAU,GAAnB,UACE,oBAAIA,UAAU,8DAA8DC,GAAG,GAA/E,2BACA,uBAAMC,SAAU,SAACC,GACfA,EAAMC,iBAnChBC,IAAQC,UAAUC,2CAChBF,IAAQG,YAAYtB,GAAQuB,MAC1B,SAACC,GAAc,IAAD,EACSA,EAASC,QAAQ,GAAGC,SAASC,SAA1CC,EADI,EACJA,IAAKC,EADD,EACCA,IACbtB,EAAe,CACbqB,MACAC,QAEFxB,EAAWmB,EAASC,QAAQ,GAAGK,sBAEjC,SAACpB,GACCC,GAAS,MAGbR,EAASH,GACTC,EAAU,KAmBJ,UAIE,uBAAOa,UAAU,0EAA0EiB,MAAO/B,EAAQgC,SAAU,SAACf,IA/CrG,SAAC,GAAgB,IACjCc,EADgC,EAAbE,OACnBF,MACR9B,EAAU8B,GACV1B,EAAW,IACXE,EAAe,IACfJ,EAAS4B,GA2CCG,CAAkBjB,MAChB,6BAGR,0BAASH,UAAU,0BAAnB,UACDZ,EACC,oBAAGY,UAAU,oEAAb,qBAAyF,sBAAMA,UAAU,8CAAhB,SAA+DZ,OACtJ,KACHE,GAAWE,EACZ,eAAC,IAAM6B,SAAP,WACE,oBAAGrB,UAAU,oEAAb,sBAA0F,sBAAMA,UAAU,8CAAhB,SAA+DV,OACzJ,oBAAGU,UAAU,oEAAb,yBAA8F,IAC9F,cAAC,kBAAD,CAAiBsB,KAAI,UAAK9B,EAAYsB,IAAjB,aAAyBtB,EAAYuB,KAAOQ,OAAQ,WAAO5B,GAAU,IAA1F,SACE,sBAAMK,UAAU,qIAAhB,mBAAyJR,EAAYsB,IAArK,aAA6KtB,EAAYuB,eAI3L,QAEA,0BAASf,UAAU,+BAAnB,UACGJ,EAAQ,mBAAGI,UAAU,gEAAb,kCAAwG,KAChHN,EAAS,mBAAGM,UAAU,iEAAb,kCAAyG,QAErH,4BCzESwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c15027f8.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, {useEffect, useState} from 'react';\nimport Geocode from 'react-geocode';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction App() {\nconst [search, setSearch] = useState(\"\");\nconst [input, setInput] = useState(\"\");\nconst [address, setAddress] = useState(\"\");\nconst [coordinates, setCoordinates] = useState({});\nconst [copied, setCopied] = useState(false);\nconst [error, setError] = useState(false);\nvar myRef = React.createRef();\n\nconst handleInputChange = ({ target }) => {\n  const { value } = target;\n  setSearch(value);\n  setAddress(\"\");\n  setCoordinates({});\n  setInput(value);\n};\n\nconst getLatAndLong = () => {\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\n  Geocode.fromAddress(search).then(\n    (response) => {\n      const { lat, lng } = response.results[0].geometry.location;\n      setCoordinates({\n        lat,\n        lng,\n      });\n      setAddress(response.results[0].formatted_address);\n    },\n    (error) => {\n      setError(true);\n    }\n  );\n  setInput(search);\n  setSearch(\"\");\n};\n\nuseEffect(()=>{\n  setTimeout(() => {\n    setError(false);\n  }, 2000);\n},[error]);\n\nuseEffect(()=>{\n  setTimeout(() => {\n    setCopied(false);\n  }, 2000);\n}, [copied]);\n\n  return (\n    <div className=\"font-nunito container mx-auto min-h-screen text-center justify-center flex flex-col\">\n      <section className=\"\">\n        <h1 className=\"mb-6 text-4xl md:text-5xl font-bold uppercase text-gray-700\" id=\"\">Get Lat & Lng</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          getLatAndLong();\n        }}>\n          <input className=\"w-3/5 mb-6 p-2 rounded shadow focus:outline-none border border-gray-100\" value={search} onChange={(event)=>{\n            handleInputChange(event);\n          }}/><br/>\n        </form>\n      </section>\n      <section className=\"flex flex-col flex-wrap\">\n    {input ? \n      <p className=\"mx-3 mb-3 sm:text-lg md:text-xl uppercase font-bold text-gray-700\">Search: <span className=\"capitalize font-normal md:p-2 text-gray-500\">{input}</span></p>\n      : null }\n    {address && coordinates ? \n    <React.Fragment>\n      <p className=\"mx-3 mb-3 sm:text-lg md:text-xl uppercase font-bold text-gray-700\">Address: <span className=\"capitalize font-normal md:p-2 text-gray-500\">{address}</span></p>\n      <p className=\"mx-3 mb-3 sm:text-lg md:text-xl uppercase font-bold text-gray-700\">Coordinates:{' '}\n      <CopyToClipboard text={`${coordinates.lat}, ${coordinates.lng}`} onCopy={() => {setCopied(true)}}>\n        <span className=\"capitalize font-normal rounded border border-gray-50 md:p-2 hover:bg-blue-50 md:hover:border-blue-500 cursor-pointer text-gray-500\">{`${coordinates.lat}, ${coordinates.lng}`}</span>\n      </CopyToClipboard>\n      </p>\n    </React.Fragment>\n    : null }\n    </section>\n      <section className=\"mt-4 fixed top-0 right-0 m-5\">\n        {error ? <p className=\"p-3 md:p-6 italic sm:text-lg md:text-xl bg-red-500 text-white\">Put a valid address!</p> : null}\n        {copied ? <p className=\"p-3 md:p-6 italic sm:text-lg md:text-xl bg-blue-500 text-white\">Copied to clipboard!</p> : null}\n      </section>\n      <div>\n</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}